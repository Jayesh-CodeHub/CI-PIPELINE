name: Lint and Analyze Code from ZIP
on:
  push:
    paths:
      - "**.zip"

permissions:
  contents: write

jobs:
  process-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Latest Zip File
        id: find_zip
        run: |
          latest_zip=$(find . -maxdepth 1 -type f -name "*.zip" -print0 | xargs -0 ls -t | head -n 1)
          if [ -z "$latest_zip" ]; then
            echo "No zip file found. Skipping analysis."
            echo "skip_analysis=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "latest_zip=$latest_zip" >> $GITHUB_OUTPUT
          echo "skip_analysis=false" >> $GITHUB_OUTPUT

      - name: Unzip and Extract Relevant Folders
        if: steps.find_zip.outputs.skip_analysis != 'true'
        run: |
          mkdir -p extracted extracted_code/masterbot extracted_code/microbots
          unzip -o "${{ steps.find_zip.outputs.latest_zip }}" -d extracted
          
          # Extract masterbot folder if it exists
          masterbot_found=false
          if find extracted -type d -name "masterbot" | grep -q .; then
            find extracted -type d -name "masterbot" -exec cp -r {}/* extracted_code/masterbot/ \; 2>/dev/null || true
            masterbot_found=true
            echo "Masterbot folder found and extracted"
          fi
          
          # Extract microbots folder if it exists
          microbots_found=false
          if find extracted -type d -name "microbots" | grep -q .; then
            find extracted -type d -name "microbots" -exec cp -r {}/* extracted_code/microbots/ \; 2>/dev/null || true
            microbots_found=true
            echo "Microbots folder found and extracted"
          fi
          
          # Set flags for later use
          echo "masterbot_found=$masterbot_found" >> $GITHUB_OUTPUT
          echo "microbots_found=$microbots_found" >> $GITHUB_OUTPUT
          
          # If neither folder found, extract all content
          if [ "$masterbot_found" = "false" ] && [ "$microbots_found" = "false" ]; then
            echo "No masterbot or microbots folders found. Extracting all content."
            cp -r extracted/* extracted_code/ 2>/dev/null || true
            echo "masterbot_found=false" >> $GITHUB_OUTPUT
            echo "microbots_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect Languages
        id: detect_lang
        if: steps.find_zip.outputs.skip_analysis != 'true'
        run: |
          # Detect languages in masterbot folder
          masterbot_python=$(find extracted_code/masterbot -type f -name "*.py" 2>/dev/null || true)
          masterbot_bash=$(find extracted_code/masterbot -type f -name "*.sh" 2>/dev/null || true)
          masterbot_powershell=$(find extracted_code/masterbot -type f -name "*.ps1" 2>/dev/null || true)
          
          # Detect languages in microbots folder
          microbots_python=$(find extracted_code/microbots -type f -name "*.py" 2>/dev/null || true)
          microbots_bash=$(find extracted_code/microbots -type f -name "*.sh" 2>/dev/null || true)
          microbots_powershell=$(find extracted_code/microbots -type f -name "*.ps1" 2>/dev/null || true)
          
          # Detect languages in other locations (if no specific folders found)
          other_python=$(find extracted_code -type f -name "*.py" ! -path "*/masterbot/*" ! -path "*/microbots/*" 2>/dev/null || true)
          other_bash=$(find extracted_code -type f -name "*.sh" ! -path "*/masterbot/*" ! -path "*/microbots/*" 2>/dev/null || true)
          other_powershell=$(find extracted_code -type f -name "*.ps1" ! -path "*/masterbot/*" ! -path "*/microbots/*" 2>/dev/null || true)
          
          # Set overall detection flags
          if [ -n "$masterbot_python" ] || [ -n "$microbots_python" ] || [ -n "$other_python" ]; then 
            echo "python_detected=true" >> $GITHUB_OUTPUT
            echo "Python files detected"
          else
            echo "python_detected=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$masterbot_bash" ] || [ -n "$microbots_bash" ] || [ -n "$other_bash" ]; then 
            echo "bash_detected=true" >> $GITHUB_OUTPUT
            echo "Bash files detected"
          else
            echo "bash_detected=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$masterbot_powershell" ] || [ -n "$microbots_powershell" ] || [ -n "$other_powershell" ]; then 
            echo "powershell_detected=true" >> $GITHUB_OUTPUT
            echo "PowerShell files detected"
          else
            echo "powershell_detected=false" >> $GITHUB_OUTPUT
          fi
          
          # Set specific folder detection flags
          echo "masterbot_has_python=$([ -n "$masterbot_python" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "masterbot_has_bash=$([ -n "$masterbot_bash" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "masterbot_has_powershell=$([ -n "$masterbot_powershell" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          echo "microbots_has_python=$([ -n "$microbots_python" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "microbots_has_bash=$([ -n "$microbots_bash" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "microbots_has_powershell=$([ -n "$microbots_powershell" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          echo "other_has_python=$([ -n "$other_python" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "other_has_bash=$([ -n "$other_bash" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "other_has_powershell=$([ -n "$other_powershell" ] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Install Python Dependencies
        if: steps.detect_lang.outputs.python_detected == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 bandit radon

      - name: Install Bash Dependencies
        if: steps.detect_lang.outputs.bash_detected == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Install PowerShell Dependencies
        if: steps.detect_lang.outputs.powershell_detected == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Perform Linting and Security Analysis
        id: lint_step
        if: steps.find_zip.outputs.skip_analysis != 'true'
        continue-on-error: true
        run: |
          mkdir -p reports
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="${{ github.ref_name }}"
          REPORT_FILE="reports/lint_report_${BRANCH_NAME}_${TIMESTAMP}.html"
          
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "report_file=$REPORT_FILE" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Create HTML report
          cat > "$REPORT_FILE" << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Lint Report</title>
              <style>
                  body { font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  h1, h2 { color: #007bff; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
                  h3 { color: #495057; margin-top: 30px; }
                  pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; border-left: 4px solid #007bff; }
                  .summary { background: #e7f3ff; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                  .error { color: #dc3545; }
                  .warning { color: #ffc107; }
                  .info { color: #17a2b8; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üîç Code Quality Analysis Report</h1>
                  <div class="summary">
                      <p><strong>Generated on:</strong> $(date)</p>
                      <p><strong>Branch:</strong> $BRANCH_NAME</p>
                      <p><strong>Repository:</strong> ${{ github.repository }}</p>
                  </div>
          EOF

          # Python Analysis
          if [ "${{ steps.detect_lang.outputs.python_detected }}" = "true" ]; then
            echo "<h2>üêç Python Code Analysis</h2>" >> "$REPORT_FILE"
            
            # Analyze Masterbot Python files
            if [ "${{ steps.detect_lang.outputs.masterbot_has_python }}" = "true" ]; then
              echo "<h3>üìÅ Masterbot Scripts</h3>" >> "$REPORT_FILE"
              
              echo "<h4>Pylint Report - Masterbot</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/masterbot -type f -name "*.py" -print0 | xargs -0 pylint --output-format=parseable --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Pylint analysis completed for masterbot" >> "$REPORT_FILE"
              else
                echo "No Python files found in masterbot or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>Flake8 Report - Masterbot</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/masterbot -type f -name "*.py" -print0 | xargs -0 flake8 --format=default --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Flake8 analysis completed for masterbot" >> "$REPORT_FILE"
              else
                echo "No Python files found in masterbot or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>üîí Security Analysis (Bandit) - Masterbot</h4><pre>" >> "$REPORT_FILE"
              if bandit -r extracted_code/masterbot --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Security analysis completed for masterbot" >> "$REPORT_FILE"
              else
                echo "No Python files found in masterbot or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>üìä Code Complexity (Radon) - Masterbot</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/masterbot -type f -name "*.py" -print0 | xargs -0 radon cc -a --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Complexity analysis completed for masterbot" >> "$REPORT_FILE"
              else
                echo "No Python files found in masterbot or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"
            fi
            
            # Analyze Microbots Python files
            if [ "${{ steps.detect_lang.outputs.microbots_has_python }}" = "true" ]; then
              echo "<h3>ü§ñ Microbots Scripts</h3>" >> "$REPORT_FILE"
              
              echo "<h4>Pylint Report - Microbots</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/microbots -type f -name "*.py" -print0 | xargs -0 pylint --output-format=parseable --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Pylint analysis completed for microbots" >> "$REPORT_FILE"
              else
                echo "No Python files found in microbots or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>Flake8 Report - Microbots</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/microbots -type f -name "*.py" -print0 | xargs -0 flake8 --format=default --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Flake8 analysis completed for microbots" >> "$REPORT_FILE"
              else
                echo "No Python files found in microbots or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>üîí Security Analysis (Bandit) - Microbots</h4><pre>" >> "$REPORT_FILE"
              if bandit -r extracted_code/microbots --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Security analysis completed for microbots" >> "$REPORT_FILE"
              else
                echo "No Python files found in microbots or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>üìä Code Complexity (Radon) - Microbots</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/microbots -type f -name "*.py" -print0 | xargs -0 radon cc -a --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Complexity analysis completed for microbots" >> "$REPORT_FILE"
              else
                echo "No Python files found in microbots or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"
            fi
            
            # Analyze Other Python files (if any)
            if [ "${{ steps.detect_lang.outputs.other_has_python }}" = "true" ]; then
              echo "<h3>üìÑ Other Python Scripts</h3>" >> "$REPORT_FILE"
              
              echo "<h4>Pylint Report - Other Files</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code -type f -name "*.py" ! -path "*/masterbot/*" ! -path "*/microbots/*" -print0 | xargs -0 pylint --output-format=parseable --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Pylint analysis completed for other files" >> "$REPORT_FILE"
              else
                echo "No other Python files found or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>Flake8 Report - Other Files</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code -type f -name "*.py" ! -path "*/masterbot/*" ! -path "*/microbots/*" -print0 | xargs -0 flake8 --format=default --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Flake8 analysis completed for other files" >> "$REPORT_FILE"
              else
                echo "No other Python files found or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>üîí Security Analysis (Bandit) - Other Files</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code -type f -name "*.py" ! -path "*/masterbot/*" ! -path "*/microbots/*" -exec bandit {} \; --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Security analysis completed for other files" >> "$REPORT_FILE"
              else
                echo "No other Python files found or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"

              echo "<h4>üìä Code Complexity (Radon) - Other Files</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code -type f -name "*.py" ! -path "*/masterbot/*" ! -path "*/microbots/*" -print0 | xargs -0 radon cc -a --exit-zero 2>&1 >> "$REPORT_FILE"; then
                echo "Complexity analysis completed for other files" >> "$REPORT_FILE"
              else
                echo "No other Python files found or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"
            fi
          fi

          # Bash Analysis
          if [ "${{ steps.detect_lang.outputs.bash_detected }}" = "true" ]; then
            echo "<h2>üêö Bash Code Analysis</h2>" >> "$REPORT_FILE"
            
            # Analyze Masterbot Bash files
            if [ "${{ steps.detect_lang.outputs.masterbot_has_bash }}" = "true" ]; then
              echo "<h3>üìÅ Masterbot Scripts</h3>" >> "$REPORT_FILE"
              echo "<h4>ShellCheck Report - Masterbot</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/masterbot -type f -name "*.sh" -print0 | xargs -0 shellcheck --format=gcc 2>&1 >> "$REPORT_FILE"; then
                echo "ShellCheck analysis completed for masterbot" >> "$REPORT_FILE"
              else
                echo "No Bash files found in masterbot or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"
            fi
            
            # Analyze Microbots Bash files
            if [ "${{ steps.detect_lang.outputs.microbots_has_bash }}" = "true" ]; then
              echo "<h3>ü§ñ Microbots Scripts</h3>" >> "$REPORT_FILE"
              echo "<h4>ShellCheck Report - Microbots</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code/microbots -type f -name "*.sh" -print0 | xargs -0 shellcheck --format=gcc 2>&1 >> "$REPORT_FILE"; then
                echo "ShellCheck analysis completed for microbots" >> "$REPORT_FILE"
              else
                echo "No Bash files found in microbots or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"
            fi
            
            # Analyze Other Bash files
            if [ "${{ steps.detect_lang.outputs.other_has_bash }}" = "true" ]; then
              echo "<h3>üìÑ Other Bash Scripts</h3>" >> "$REPORT_FILE"
              echo "<h4>ShellCheck Report - Other Files</h4><pre>" >> "$REPORT_FILE"
              if find extracted_code -type f -name "*.sh" ! -path "*/masterbot/*" ! -path "*/microbots/*" -print0 | xargs -0 shellcheck --format=gcc 2>&1 >> "$REPORT_FILE"; then
                echo "ShellCheck analysis completed for other files" >> "$REPORT_FILE"
              else
                echo "No other Bash files found or analysis failed" >> "$REPORT_FILE"
              fi
              echo "</pre>" >> "$REPORT_FILE"
            fi
          fi

          # PowerShell Analysis
          if [ "${{ steps.detect_lang.outputs.powershell_detected }}" = "true" ]; then
            echo "<h2>üíª PowerShell Code Analysis</h2>" >> "$REPORT_FILE"
            
            # Analyze Masterbot PowerShell files
            if [ "${{ steps.detect_lang.outputs.masterbot_has_powershell }}" = "true" ]; then
              echo "<h3>üìÅ Masterbot Scripts</h3>" >> "$REPORT_FILE"
              echo "<h4>PSScriptAnalyzer Report - Masterbot</h4><pre>" >> "$REPORT_FILE"
              pwsh -NoProfile -Command "
              try {
                \$files = Get-ChildItem -Path 'extracted_code/masterbot' -Recurse -Filter '*.ps1' -ErrorAction SilentlyContinue
                if (\$files.Count -eq 0) {
                  Write-Output 'No PowerShell files found in masterbot folder'
                } else {
                  Write-Output \"Found \$(\$files.Count) PowerShell files in masterbot\"
                  foreach (\$file in \$files) {
                    Write-Output \"\\n=== Analyzing: \$(\$file.Name) ===\"
                    try {
                      \$results = Invoke-ScriptAnalyzer -Path \$file.FullName -Severity Warning,Error -ErrorAction SilentlyContinue
                      if (\$results.Count -eq 0) {
                        Write-Output '‚úÖ No issues found'
                      } else {
                        foreach (\$result in \$results) {
                          Write-Output \"‚ö†Ô∏è  \$(\$result.Severity): \$(\$result.RuleName)\"
                          Write-Output \"   Line \$(\$result.Line): \$(\$result.Message)\"
                          Write-Output \"   Suggestion: \$(\$result.SuggestedCorrections)\"
                          Write-Output '---'
                        }
                      }
                    } catch {
                      Write-Output \"‚ùå Error analyzing \$(\$file.Name): \$(\$_.Exception.Message)\"
                    }
                  }
                }
              } catch {
                Write-Output \"‚ùå PowerShell analysis failed for masterbot: \$(\$_.Exception.Message)\"
              }" 2>&1 >> "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"
            fi
            
            # Analyze Microbots PowerShell files
            if [ "${{ steps.detect_lang.outputs.microbots_has_powershell }}" = "true" ]; then
              echo "<h3>ü§ñ Microbots Scripts</h3>" >> "$REPORT_FILE"
              echo "<h4>PSScriptAnalyzer Report - Microbots</h4><pre>" >> "$REPORT_FILE"
              pwsh -NoProfile -Command "
              try {
                \$files = Get-ChildItem -Path 'extracted_code/microbots' -Recurse -Filter '*.ps1' -ErrorAction SilentlyContinue
                if (\$files.Count -eq 0) {
                  Write-Output 'No PowerShell files found in microbots folder'
                } else {
                  Write-Output \"Found \$(\$files.Count) PowerShell files in microbots\"
                  foreach (\$file in \$files) {
                    Write-Output \"\\n=== Analyzing: \$(\$file.Name) ===\"
                    try {
                      \$results = Invoke-ScriptAnalyzer -Path \$file.FullName -Severity Warning,Error -ErrorAction SilentlyContinue
                      if (\$results.Count -eq 0) {
                        Write-Output '‚úÖ No issues found'
                      } else {
                        foreach (\$result in \$results) {
                          Write-Output \"‚ö†Ô∏è  \$(\$result.Severity): \$(\$result.RuleName)\"
                          Write-Output \"   Line \$(\$result.Line): \$(\$result.Message)\"
                          Write-Output \"   Suggestion: \$(\$result.SuggestedCorrections)\"
                          Write-Output '---'
                        }
                      }
                    } catch {
                      Write-Output \"‚ùå Error analyzing \$(\$file.Name): \$(\$_.Exception.Message)\"
                    }
                  }
                }
              } catch {
                Write-Output \"‚ùå PowerShell analysis failed for microbots: \$(\$_.Exception.Message)\"
              }" 2>&1 >> "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"
            fi
            
            # Analyze Other PowerShell files
            if [ "${{ steps.detect_lang.outputs.other_has_powershell }}" = "true" ]; then
              echo "<h3>üìÑ Other PowerShell Scripts</h3>" >> "$REPORT_FILE"
              echo "<h4>PSScriptAnalyzer Report - Other Files</h4><pre>" >> "$REPORT_FILE"
              pwsh -NoProfile -Command "
              try {
                \$files = Get-ChildItem -Path 'extracted_code' -Recurse -Filter '*.ps1' -ErrorAction SilentlyContinue | Where-Object { \$_.FullName -notlike '*masterbot*' -and \$_.FullName -notlike '*microbots*' }
                if (\$files.Count -eq 0) {
                  Write-Output 'No other PowerShell files found'
                } else {
                  Write-Output \"Found \$(\$files.Count) other PowerShell files\"
                  foreach (\$file in \$files) {
                    Write-Output \"\\n=== Analyzing: \$(\$file.Name) ===\"
                    try {
                      \$results = Invoke-ScriptAnalyzer -Path \$file.FullName -Severity Warning,Error -ErrorAction SilentlyContinue
                      if (\$results.Count -eq 0) {
                        Write-Output '‚úÖ No issues found'
                      } else {
                        foreach (\$result in \$results) {
                          Write-Output \"‚ö†Ô∏è  \$(\$result.Severity): \$(\$result.RuleName)\"
                          Write-Output \"   Line \$(\$result.Line): \$(\$result.Message)\"
                          Write-Output \"   Suggestion: \$(\$result.SuggestedCorrections)\"
                          Write-Output '---'
                        }
                      }
                    } catch {
                      Write-Output \"‚ùå Error analyzing \$(\$file.Name): \$(\$_.Exception.Message)\"
                    }
                  }
                }
              } catch {
                Write-Output \"‚ùå PowerShell analysis failed for other files: \$(\$_.Exception.Message)\"
              }" 2>&1 >> "$REPORT_FILE"
              echo "</pre>" >> "$REPORT_FILE"
            fi
          fiSeverity): \$(\$result.RuleName) in \$(\$result.ScriptName) at line \$(\$result.Line)\"
                        Write-Output \"\$(\$result.Message)\"
                        Write-Output '---'
                      }
                    }
                  } catch {
                    Write-Output \"Error analyzing \$(\$file.Name): \$(\$_.Exception.Message)\"
                  }
                }
              }
            } catch {
              Write-Output \"PowerShell analysis failed: \$(\$_.Exception.Message)\"
            }" 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          # Close HTML
          echo "</div></body></html>" >> "$REPORT_FILE"
          
          echo "Report generated: $REPORT_FILE"
          ls -la "$REPORT_FILE"

      - name: Commit and Push Report
        if: always() && steps.find_zip.outputs.skip_analysis != 'true'
        run: |
          branch_name="${{ steps.lint_step.outputs.branch_name }}"
          timestamp="${{ steps.lint_step.outputs.timestamp }}"
          report_file="${{ steps.lint_step.outputs.report_file }}"
          
          # Create reports directory structure
          mkdir -p "reports_archive/$branch_name"
          
          # Copy report to archive location
          if [ -f "$report_file" ]; then
            cp "$report_file" "reports_archive/$branch_name/"
            echo "Report copied to reports_archive/$branch_name/"
          else
            echo "Warning: Report file not found at $report_file"
            exit 1
          fi
          
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add and commit changes
          git add reports_archive/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add lint report for branch $branch_name (timestamp: $timestamp)"
            git push origin "$branch_name"
            echo "‚úÖ Report committed and pushed to repository"
          fi

      - name: Upload Report to SharePoint using Microsoft Graph API
        if: always() && steps.find_zip.outputs.skip_analysis != 'true'
        env:
          TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
          CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          SITE_URL: "https://n1pw.sharepoint.com/sites/CIpipeline-testing"
          FOLDER_PATH: "Shared Documents/Reports"
        run: |
          # Install required tools
          sudo apt-get install -y curl jq
          
          branch_name="${{ steps.lint_step.outputs.branch_name }}"
          timestamp="${{ steps.lint_step.outputs.timestamp }}"
          report_file="${{ steps.lint_step.outputs.report_file }}"
          
          echo "üîê Authenticating with Microsoft Graph API..."
          
          # Get access token
          token_response=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&scope=https://graph.microsoft.com/.default" \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token")
          
          # Check if token request was successful
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to make token request"
            exit 1
          fi
          
          access_token=$(echo "$token_response" | jq -r '.access_token')
          
          if [ "$access_token" = "null" ] || [ -z "$access_token" ]; then
            echo "‚ùå Failed to get access token"
            echo "Token response: $token_response"
            exit 1
          fi
          
          echo "‚úÖ Successfully obtained access token"
          
          # Get site ID
          echo "üîç Getting SharePoint site ID..."
          site_response=$(curl -s -X GET \
            -H "Authorization: Bearer $access_token" \
            -H "Accept: application/json" \
            "https://graph.microsoft.com/v1.0/sites/n1pw.sharepoint.com:/sites/CIpipeline-testing")
          
          site_id=$(echo "$site_response" | jq -r '.id')
          
          if [ "$site_id" = "null" ] || [ -z "$site_id" ]; then
            echo "‚ùå Failed to get site ID"
            echo "Site response: $site_response"
            exit 1
          fi
          
          echo "‚úÖ Site ID obtained: $site_id"
          
          # Get or create Reports folder
          echo "üìÅ Accessing Reports folder..."
          folder_response=$(curl -s -X GET \
            -H "Authorization: Bearer $access_token" \
            -H "Accept: application/json" \
            "https://graph.microsoft.com/v1.0/sites/$site_id/drive/root:/Shared%20Documents/Reports")
          
          parent_id=$(echo "$folder_response" | jq -r '.id')
          
          if [ "$parent_id" = "null" ] || [ -z "$parent_id" ]; then
            echo "‚ö†Ô∏è Reports folder not found, creating it..."
            create_folder_response=$(curl -s -X POST \
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type: application/json" \
              -d '{"name":"Reports","folder":{}}' \
              "https://graph.microsoft.com/v1.0/sites/$site_id/drive/root:/Shared%20Documents:/children")
            
            parent_id=$(echo "$create_folder_response" | jq -r '.id')
            
            if [ "$parent_id" = "null" ] || [ -z "$parent_id" ]; then
              echo "‚ùå Failed to create Reports folder"
              echo "Create folder response: $create_folder_response"
              exit 1
            fi
            echo "‚úÖ Reports folder created"
          else
            echo "‚úÖ Reports folder found"
          fi
          
          # Upload file
          if [ ! -f "$report_file" ]; then
            echo "‚ùå Report file not found: $report_file"
            exit 1
          fi
          
          file_name="lint_report_${branch_name}_${timestamp}.html"
          upload_url="https://graph.microsoft.com/v1.0/sites/$site_id/drive/items/$parent_id:/$file_name:/content"
          
          echo "üì§ Uploading report to SharePoint..."
          echo "Upload URL: $upload_url"
          echo "File: $report_file"
          
          upload_response=$(curl -s -w "%{http_code}" -X PUT "$upload_url" \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: text/html" \
            --data-binary "@$report_file")
          
          http_code="${upload_response: -3}"
          response_body="${upload_response%???}"
          
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "‚úÖ Report successfully uploaded to SharePoint!"
            echo "File name: $file_name"
            
            # Extract file URL if available
            file_url=$(echo "$response_body" | jq -r '.webUrl // empty')
            if [ -n "$file_url" ]; then
              echo "üîó File URL: $file_url"
            fi
          else
            echo "‚ùå Failed to upload report to SharePoint"
            echo "HTTP Code: $http_code"
            echo "Response: $response_body"
            exit 1
          fi