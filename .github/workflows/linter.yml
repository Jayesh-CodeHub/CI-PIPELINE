
name: Lint and Analyze Code from ZIP

on:
  push:
    paths:
      - "**.zip"

permissions:
  contents: write

jobs:
  process-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Latest ZIP File
        id: find_zip
        run: |
          latest_zip=$(find . -maxdepth 1 -type f -name "*.zip" -printf '%T@ %p\n' | sort -nr | head -n 1 | cut -d ' ' -f 2-)
          if [ -z "$latest_zip" ]; then
            echo "No ZIP file found. Skipping analysis."
            exit 0
          fi
          echo "latest_zip=$latest_zip" >> $GITHUB_ENV

      - name: Unzip and Extract Relevant Folders
        run: |
          mkdir -p extracted_code
          unzip -o "${{ env.latest_zip }}" -d extracted_code
          find extracted_code -type d \( -name "masterbot" -o -name "microbots" \) -exec cp -r {} extracted_code/ \;
          true

      - name: Verify PowerShell Setup
        run: |
          echo "Checking PowerShell Installation"
          pwsh --version
          echo "Checking PowerShell Modules"
          pwsh -Command "Get-Module -ListAvailable PSScriptAnalyzer"

      - name: Detect Languages
        run: |
          python_files=$(find extracted_code -type f -name "*.py")
          bash_files=$(find extracted_code -type f -name "*.sh")
          powershell_files=$(find extracted_code -type f -name "*.ps1")
          if [ -n "$python_files" ]; then
            echo "python_detected=true" >> $GITHUB_ENV
          fi
          if [ -n "$bash_files" ]; then
            echo "bash_detected=true" >> $GITHUB_ENV
          fi
          if [ -n "$powershell_files" ]; then
            echo "powershell_detected=true" >> $GITHUB_ENV
          fi

      - name: Install Dependencies
        run: |
          if [ "${{ env.python_detected }}" = "true" ]; then
            pip install pylint flake8 bandit radon
          fi
          if [ "${{ env.bash_detected }}" = "true" ]; then
            sudo apt-get update
            sudo apt-get install -y shellcheck
          fi
          if [ "${{ env.powershell_detected }}" = "true" ]; then
            sudo apt-get update
            sudo apt-get install -y powershell
            pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"
          fi

      - name: Perform Linting and Security Analysis
        continue-on-error: true
        run: |
          mkdir -p reports
          TIMESTAMP=$(date +%s)
          REPORT_FILE="reports/lint_report_${TIMESTAMP}.html"
          echo "<html><head><title>Lint Report ${TIMESTAMP}</title><style>" > "${REPORT_FILE}"
          echo "body { font-family: Arial, sans-serif; padding: 20px; } h1, h2 { color: #087bff; } pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }" >> "${REPORT_FILE}"
          echo "</style></head><body>" >> "${REPORT_FILE}"
          echo "<h1>Lint and Security Analysis Report</h1>" >> "${REPORT_FILE}"
          echo "<p>Generated on: $(date)</p>" >> "${REPORT_FILE}"
          if [ "${{ env.python_detected }}" = "true" ]; then
            echo "<h2>Python Code Analysis</h2>" >> "${REPORT_FILE}"
            echo "<h3>Pylint Report</h3><pre>" >> "${REPORT_FILE}"
            find extracted_code -type f -name "*.py" -print0 | xargs -0 pylint --output-format=parseable 2>&1 | tee -a "${REPORT_FILE}" || true
            echo "</pre>" >> "${REPORT_FILE}"
            echo "<h3>Flake8 Report</h3><pre>" >> "${REPORT_FILE}"
            find extracted_code -type f -name "*.py" -print0 | xargs -0 flake8 --format=default 2>&1 | tee -a "${REPORT_FILE}" || true
            echo "</pre>" >> "${REPORT_FILE}"
            echo "<h3>Security Analysis (Bandit)</h3><pre>" >> "${REPORT_FILE}"
            bandit -r extracted_code -f html -o reports/bandit_report.html 2>&1
            cat reports/bandit_report.html | tee -a "${REPORT_FILE}" || true
            echo "</pre>" >> "${REPORT_FILE}"
            echo "<h3>Code Complexity (Radon)</h3><pre>" >> "${REPORT_FILE}"
            find extracted_code -type f -name "*.py" -print0 | xargs -0 radon cc -a 2>&1 | tee -a "${REPORT_FILE}" || true
            echo "</pre>" >> "${REPORT_FILE}"
          fi
          if [ "${{ env.bash_detected }}" = "true" ]; then
            echo "<h2>Bash Code Analysis</h2>" >> "${REPORT_FILE}"
            echo "<h3>ShellCheck Report</h3><pre>" >> "${REPORT_FILE}"
            find extracted_code -type f -name "*.sh" -print0 | xargs -0 shellcheck 2>&1 | tee -a "${REPORT_FILE}" || true
            echo "</pre>" >> "${REPORT_FILE}"
          fi
          if [ "${{ env.powershell_detected }}" = "true" ]; then
            echo "<h2>PowerShell Code Analysis</h2>" >> "${REPORT_FILE}"
            echo "<h3>PSScriptAnalyzer Report</h3><pre>" >> "${REPORT_FILE}"
            pwsh -NoProfile -Command "
              \$ErrorActionPreference = 'Continue'
              \$files = Get-ChildItem -Path extracted_code -Recurse -Filter '*.ps1'
              if ((\$files.Count -eq 0)) {
                Write-Host 'No PowerShell files found'
              } else {
                Write-Host "Found \$($files.Count) PowerShell files"
                \$files | ForEach-Object {
                  Write-Host "Analyzing: \$($_.FullName)"
                  Invoke-ScriptAnalyzer -Path \$_.FullName -Severity Warning,Error
                }
              }
            " 2>&1 | tee -a "${REPORT_FILE}" || true
            echo "</pre>" >> "${REPORT_FILE}"
          fi
          echo "</body></html>" >> "${REPORT_FILE}"
          echo "report_file=${REPORT_FILE}" >> $GITHUB_ENV
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_ENV

      - name: Commit and Push Report
        run: |
          branch_name=${{ github.ref_name }}
          mkdir -p reports_dir/"${branch_name}"
          mv reports/lint_report_*.html reports_dir/"${branch_name}"/
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add reports_dir/
          git commit -m "Add lint report for latest zip" || echo "No changes to commit"
          git push origin "${branch_name}" || echo "No changes to push"

      - name: Upload Report to SharePoint using Microsoft Graph API
        if: always()
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $tenantId = "${{ secrets.SHAREPOINT_TENANT_ID }}"
          $clientId = "${{ secrets.SHAREPOINT_CLIENT_ID }}"
          $clientSecret = "${{ secrets.SHAREPOINT_CLIENT_SECRET }}"
          $siteName = "CIpipeline-testing"
          $siteDomain = "n1pw.sharepoint.com"
          $branchName = "${{ github.ref_name }}"
          $reportFilePath = "${{ env.report_file }}"
          $reportFileName = "lint_report_${{ env.timestamp }}.html"

          # Get access token
          $body = @{
            grant_type    = "client_credentials"
            client_id     = $clientId
            client_secret = $clientSecret
            scope         = "https://graph.microsoft.com/.default"
          }

          $tokenResponse = Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Body $body
          $accessToken = $tokenResponse.access_token

          # Get Site ID
          $siteInfo = Invoke-RestMethod -Headers @{Authorization = "Bearer $accessToken"} `
            -Uri "https://graph.microsoft.com/v1.0/sites/${siteDomain}:/sites/${siteName}"
          $siteId = $siteInfo.id

          # Get Drive ID (Documents library)
          $driveInfo = Invoke-RestMethod -Headers @{Authorization = "Bearer $accessToken"} `
            -Uri "https://graph.microsoft.com/v1.0/sites/${siteId}/drives"
          $driveId = ($driveInfo.value | Where-Object { $_.name -eq "Documents" }).id

          # Upload file to Reports folder
          $uploadUrl = "https://graph.microsoft.com/v1.0/drives/${driveId}/root:/Reports/${branchName}/${reportFileName}:/content"
          Invoke-RestMethod -Headers @{Authorization = "Bearer $accessToken"} `
            -Uri $uploadUrl -Method PUT -InFile $reportFilePath -ContentType "text/html"

          Write-Host "Report uploaded to SharePoint successfully using Microsoft Graph API."

        env:
          SHAREPOINT_TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
          SHAREPOINT_CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
