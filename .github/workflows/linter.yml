name: Lint and Analyze Code from ZIP
on:
  push:
    paths:
      - "**.zip"

permissions:
  contents: write

jobs:
  process-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Latest Zip File
        id: find_zip
        run: |
          latest_zip=$(find . -maxdepth 1 -type f -name "*.zip" -print0 | xargs -0 ls -t | head -n 1)
          if [ -z "$latest_zip" ]; then
            echo "No zip file found. Skipping analysis."
            exit 0
          fi
          echo "latest_zip=$latest_zip" >> $GITHUB_ENV

      - name: Unzip and Extract Relevant Folders
        run: |
          mkdir -p extracted extracted_code
          unzip -o "$latest_zip" -d extracted
          find extracted -type d \( -name "masterbot" -o -name "microbots" \) -exec cp -r {} extracted_code/ \;

      - name: Detect Languages
        id: detect_lang
        run: |
          python_files=$(find extracted_code -type f -name "*.py")
          bash_files=$(find extracted_code -type f -name "*.sh")
          powershell_files=$(find extracted_code -type f -name "*.ps1")
          if [ -n "$python_files" ]; then echo "python_detected=true" >> $GITHUB_ENV; fi
          if [ -n "$bash_files" ]; then echo "bash_detected=true" >> $GITHUB_ENV; fi
          if [ -n "$powershell_files" ]; then echo "powershell_detected=true" >> $GITHUB_ENV; fi

      - name: Install Dependencies
        run: |
          sudo apt-get update
          if [ "$python_detected" = "true" ]; then
            pip install pylint flake8 bandit radon
          fi
          if [ "$bash_detected" = "true" ]; then
            sudo apt-get install -y shellcheck
          fi
          if [ "$powershell_detected" = "true" ]; then
            sudo apt-get install -y powershell
            pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"
          fi

      - name: Perform Linting and Security Analysis
        id: lint_step
        continue-on-error: true
        run: |
          mkdir -p reports
          TIMESTAMP=$(date +%s)
          REPORT_FILE="reports/lint_report_${TIMESTAMP}.html"
          echo "::set-output name=timestamp::$TIMESTAMP"
          echo "::set-output name=report_file::$REPORT_FILE"

          echo "<html><head><title>Lint Report</title><style>" > "$REPORT_FILE"
          echo "body { font-family: Arial, sans-serif; padding: 20px; } h1, h2 { color: #007bff; } pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }" >> "$REPORT_FILE"
          echo "</style></head><body>" >> "$REPORT_FILE"
          echo "<h1>Lint and Security Analysis Report</h1>" >> "$REPORT_FILE"
          echo "<p>Generated on: $(date)</p>" >> "$REPORT_FILE"

          if [ "$python_detected" = "true" ]; then
            echo "<h2>Python Code Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>Pylint Report</h3><pre>" >> "$REPORT_FILE"
            find extracted_code -type f -name "*.py" -print0 | xargs -0 pylint --output-format=parseable 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"

            echo "<h3>Flake8 Report</h3><pre>" >> "$REPORT_FILE"
            find extracted_code -type f -name "*.py" -print0 | xargs -0 flake8 --format=default 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"

            echo "<h3>Security Analysis (Bandit)</h3><pre>" >> "$REPORT_FILE"
            bandit -r extracted_code 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"

            echo "<h3>Code Complexity (Radon)</h3><pre>" >> "$REPORT_FILE"
            find extracted_code -type f -name "*.py" -print0 | xargs -0 radon cc -a 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          if [ "$bash_detected" = "true" ]; then
            echo "<h2>Bash Code Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>ShellCheck Report</h3><pre>" >> "$REPORT_FILE"
            find extracted_code -type f -name "*.sh" -print0 | xargs -0 shellcheck 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          if [ "$powershell_detected" = "true" ]; then
            echo "<h2>PowerShell Code Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>PSScriptAnalyzer Report</h3><pre>" >> "$REPORT_FILE"
            pwsh -NoProfile -Command "
            $files = Get-ChildItem -Path extracted_code -Recurse -Filter '*.ps1'
            foreach ($file in $files) {
              Write-Output \"Analyzing: $($file.FullName)\"
              $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Warning,Error
              foreach ($result in $results) {
                Write-Output \"$($result.Severity): $($result.RuleName) in $($result.ScriptName) at line $($result.Line)`n$($result.Message)\"
              }
            }" 2>&1 >> "$REPORT_FILE"
            echo "</pre>" >> "$REPORT_FILE"
          fi

          echo "</body></html>" >> "$REPORT_FILE"

      - name: Commit and Push Report
        if: always()
        run: |
          branch_name="${{ github.ref_name }}"
          mkdir -p reports_dir/"$branch_name"
          mv "${{ steps.lint_step.outputs.report_file }}" reports_dir/"$branch_name"/ || true
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add reports_dir/ || true
          git commit -m "Add lint report for latest zip" || echo "No changes to commit"
          git push origin "$branch_name" || echo "No changes to push"

      - name: Upload Report to SharePoint using Microsoft Graph API
        if: always()
        env:
          TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
          CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          SITE_URL: "https://n1pw.sharepoint.com/sites/CIpipeline-testing"
          FOLDER_PATH: "Shared Documents/Reports"
        run: |
          sudo apt-get install -y curl jq

          token_response=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&scope=https://graph.microsoft.com/.default" \
            https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token)

          access_token=$(echo "$token_response" | jq -r '.access_token')

          site_id=$(curl -s -X GET -H "Authorization: Bearer $access_token" \
            "https://graph.microsoft.com/v1.0/sites/n1pw.sharepoint.com:/sites/CIpipeline-testing" | jq -r '.id')

          parent_id=$(curl -s -X GET -H "Authorization: Bearer $access_token" \
            "https://graph.microsoft.com/v1.0/sites/$site_id/drive/root:/Shared Documents/Reports" | jq -r '.id')

          branch_name="${{ github.ref_name }}"
          timestamp="${{ steps.lint_step.outputs.timestamp }}"
          report_file_path="reports_dir/$branch_name/lint_report_${timestamp}.html"

          upload_url="https://graph.microsoft.com/v1.0/sites/$site_id/drive/items/$parent_id:/lint_report_${branch_name}_${timestamp}.html:/content"

          echo "Uploading to: $upload_url"

          curl -X PUT "$upload_url" \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: text/html" \
            --data-binary @"$report_file_path"

          echo 'âœ… Report uploaded to SharePoint using Microsoft Graph API.'