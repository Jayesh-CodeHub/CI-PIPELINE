name: Lint and Analyze Code from ZIP
on:
  push:
    paths:
      - "**.zip"

permissions:
  contents: write

jobs:
  process-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Latest Zip File
        id: find_zip
        run: |
          latest_zip=$(find . -maxdepth 1 -type f -name "*.zip" -print0 | xargs -0 ls -t | head -n 1)
          if [ -z "$latest_zip" ]; then
            echo "No zip file found. Skipping analysis."
            echo "skip_analysis=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "latest_zip=$latest_zip" >> $GITHUB_OUTPUT
          echo "skip_analysis=false" >> $GITHUB_OUTPUT

      - name: Unzip and Extract Relevant Folders
        if: steps.find_zip.outputs.skip_analysis != 'true'
        run: |
          mkdir -p extracted extracted_code
          unzip -o "${{ steps.find_zip.outputs.latest_zip }}" -d extracted
          
          # Extract masterbot and microbots folders if they exist
          if find extracted -type d -name "masterbot" | grep -q .; then
            find extracted -type d -name "masterbot" -exec cp -r {} extracted_code/ \;
          fi
          if find extracted -type d -name "microbots" | grep -q .; then
            find extracted -type d -name "microbots" -exec cp -r {} extracted_code/ \;
          fi
          
          # Check if any code was extracted
          if [ ! "$(ls -A extracted_code)" ]; then
            echo "No masterbot or microbots folders found. Extracting all content."
            cp -r extracted/* extracted_code/ 2>/dev/null || true
          fi

      - name: Detect Languages
        id: detect_lang
        if: steps.find_zip.outputs.skip_analysis != 'true'
        run: |
          python_files=$(find extracted_code -type f -name "*.py" 2>/dev/null || true)
          bash_files=$(find extracted_code -type f -name "*.sh" 2>/dev/null || true)
          powershell_files=$(find extracted_code -type f -name "*.ps1" 2>/dev/null || true)
          
          if [ -n "$python_files" ]; then 
            echo "python_detected=true" >> $GITHUB_OUTPUT
            echo "Python files detected"
          else
            echo "python_detected=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$bash_files" ]; then 
            echo "bash_detected=true" >> $GITHUB_OUTPUT
            echo "Bash files detected"
          else
            echo "bash_detected=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$powershell_files" ]; then 
            echo "powershell_detected=true" >> $GITHUB_OUTPUT
            echo "PowerShell files detected"
          else
            echo "powershell_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Python Dependencies
        if: steps.detect_lang.outputs.python_detected == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 bandit

      - name: Install Bash Dependencies
        if: steps.detect_lang.outputs.bash_detected == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Install PowerShell Dependencies
        if: steps.detect_lang.outputs.powershell_detected == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Perform Critical Error Analysis
        id: lint_step
        if: steps.find_zip.outputs.skip_analysis != 'true'
        continue-on-error: true
        run: |
          mkdir -p reports
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="${{ github.ref_name }}"
          REPORT_FILE="reports/lint_report_${BRANCH_NAME}_${TIMESTAMP}.html"
          ERROR_COUNT=0
          
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "report_file=$REPORT_FILE" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Create HTML report header
          cat > "$REPORT_FILE" << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Critical Error Analysis Report</title>
              <style>
                  body { font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  h1, h2 { color: #007bff; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
                  h3 { color: #495057; margin-top: 30px; }
                  pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; border-left: 4px solid #007bff; }
                  .summary { background: #e7f3ff; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                  .success { background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin-bottom: 20px; border: 1px solid #c3e6cb; }
                  .error { color: #dc3545; background: #f8d7da; padding: 10px; border-radius: 5px; margin: 10px 0; border: 1px solid #f5c6cb; }
                  .critical { color: #721c24; background: #f8d7da; padding: 10px; border-radius: 5px; margin: 10px 0; border: 2px solid #dc3545; font-weight: bold; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üîç Critical Error Analysis Report</h1>
                  <div class="summary">
                      <p><strong>Generated on:</strong> $(date)</p>
                      <p><strong>Branch:</strong> $BRANCH_NAME</p>
                      <p><strong>Repository:</strong> ${{ github.repository }}</p>
                      <p><strong>Analysis Type:</strong> Critical Errors and Syntax Issues Only</p>
                  </div>
          EOF

          # Python Analysis - Only Critical Errors
          if [ "${{ steps.detect_lang.outputs.python_detected }}" = "true" ]; then
            echo "<h2>üêç Python Critical Error Analysis</h2>" >> "$REPORT_FILE"
            
            # Pylint - Only errors and fatal issues
            echo "<h3>Critical Issues (Pylint)</h3>" >> "$REPORT_FILE"
            pylint_output=$(find extracted_code -type f -name "*.py" -print0 | xargs -0 pylint --errors-only --disable=C,R,W --output-format=parseable 2>&1 || true)
            if [ -n "$pylint_output" ]; then
              echo "<pre class='error'>$pylint_output</pre>" >> "$REPORT_FILE"
              ERROR_COUNT=$((ERROR_COUNT + $(echo "$pylint_output" | grep -c ":" || echo 0)))
            else
              echo "<div class='success'>‚úÖ No critical errors found with Pylint</div>" >> "$REPORT_FILE"
            fi

            # Flake8 - Only syntax errors and critical issues
            echo "<h3>Syntax Errors (Flake8)</h3>" >> "$REPORT_FILE"
            flake8_output=$(find extracted_code -type f -name "*.py" -print0 | xargs -0 flake8 --select=E9,F63,F7,F82 --format=default 2>&1 || true)
            if [ -n "$flake8_output" ]; then
              echo "<pre class='critical'>$flake8_output</pre>" >> "$REPORT_FILE"
              ERROR_COUNT=$((ERROR_COUNT + $(echo "$flake8_output" | grep -c ":" || echo 0)))
            else
              echo "<div class='success'>‚úÖ No syntax errors found with Flake8</div>" >> "$REPORT_FILE"
            fi

            # Bandit - Only high severity security issues
            echo "<h3>üîí High Severity Security Issues (Bandit)</h3>" >> "$REPORT_FILE"
            bandit_output=$(bandit -r extracted_code -f txt -l -i --severity-level high 2>&1 || true)
            if echo "$bandit_output" | grep -q "High:"; then
              echo "<pre class='critical'>$bandit_output</pre>" >> "$REPORT_FILE"
              ERROR_COUNT=$((ERROR_COUNT + $(echo "$bandit_output" | grep -c "High:" || echo 0)))
            else
              echo "<div class='success'>‚úÖ No high severity security issues found</div>" >> "$REPORT_FILE"
            fi
          fi

          # Bash Analysis - Only errors
          if [ "${{ steps.detect_lang.outputs.bash_detected }}" = "true" ]; then
            echo "<h2>üêö Bash Critical Error Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>Syntax and Logic Errors (ShellCheck)</h3>" >> "$REPORT_FILE"
            shellcheck_output=$(find extracted_code -type f -name "*.sh" -print0 | xargs -0 shellcheck --severity=error --format=gcc 2>&1 || true)
            if [ -n "$shellcheck_output" ]; then
              echo "<pre class='error'>$shellcheck_output</pre>" >> "$REPORT_FILE"
              ERROR_COUNT=$((ERROR_COUNT + $(echo "$shellcheck_output" | grep -c "error:" || echo 0)))
            else
              echo "<div class='success'>‚úÖ No critical errors found in Bash scripts</div>" >> "$REPORT_FILE"
            fi
          fi

          # PowerShell Analysis - Only errors
          if [ "${{ steps.detect_lang.outputs.powershell_detected }}" = "true" ]; then
            echo "<h2>üíª PowerShell Critical Error Analysis</h2>" >> "$REPORT_FILE"
            echo "<h3>Syntax and Critical Errors (PSScriptAnalyzer)</h3>" >> "$REPORT_FILE"
            ps_output=$(pwsh -NoProfile -Command "
            try {
              \$files = Get-ChildItem -Path 'extracted_code' -Recurse -Filter '*.ps1' -ErrorAction SilentlyContinue
              \$errorFound = \$false
              if (\$files.Count -eq 0) {
                Write-Output 'No PowerShell files found for analysis'
              } else {
                foreach (\$file in \$files) {
                  try {
                    \$results = Invoke-ScriptAnalyzer -Path \$file.FullName -Severity Error -ErrorAction SilentlyContinue
                    if (\$results.Count -gt 0) {
                      \$errorFound = \$true
                      foreach (\$result in \$results) {
                        Write-Output \"ERROR: \$(\$result.RuleName) in \$(\$result.ScriptName) at line \$(\$result.Line)\"
                        Write-Output \"\$(\$result.Message)\"
                        Write-Output '---'
                      }
                    }
                  } catch {
                    Write-Output \"Error analyzing \$(\$file.Name): \$(\$_.Exception.Message)\"
                    \$errorFound = \$true
                  }
                }
                if (-not \$errorFound) {
                  Write-Output 'SUCCESS: No critical errors found'
                }
              }
            } catch {
              Write-Output \"PowerShell analysis failed: \$(\$_.Exception.Message)\"
            }" 2>&1)
            
            if echo "$ps_output" | grep -q "ERROR:"; then
              echo "<pre class='error'>$ps_output</pre>" >> "$REPORT_FILE"
              ERROR_COUNT=$((ERROR_COUNT + $(echo "$ps_output" | grep -c "ERROR:" || echo 0)))
            else
              echo "<div class='success'>‚úÖ No critical errors found in PowerShell scripts</div>" >> "$REPORT_FILE"
            fi
          fi

          # Summary
          echo "<h2>üìä Analysis Summary</h2>" >> "$REPORT_FILE"
          if [ $ERROR_COUNT -eq 0 ]; then
            echo "<div class='success'><h3>üéâ Code Scan Successful!</h3><p>No critical errors or syntax issues found. Code is ready for deployment.</p></div>" >> "$REPORT_FILE"
            echo "scan_status=success" >> $GITHUB_OUTPUT
          else
            echo "<div class='error'><h3>‚ö†Ô∏è Critical Issues Found</h3><p>Total critical errors/issues: $ERROR_COUNT</p><p>Please review and fix these issues before deployment.</p></div>" >> "$REPORT_FILE"
            echo "scan_status=failed" >> $GITHUB_OUTPUT
          fi
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT

          # Close HTML
          echo "</div></body></html>" >> "$REPORT_FILE"
          
          echo "Report generated: $REPORT_FILE"
          echo "Critical errors found: $ERROR_COUNT"

      - name: Commit Report to Branch (Only if Errors Found)
        if: always() && steps.find_zip.outputs.skip_analysis != 'true' && steps.lint_step.outputs.scan_status == 'failed'
        run: |
          branch_name="${{ steps.lint_step.outputs.branch_name }}"
          timestamp="${{ steps.lint_step.outputs.timestamp }}"
          report_file="${{ steps.lint_step.outputs.report_file }}"
          error_count="${{ steps.lint_step.outputs.error_count }}"
          
          # Create reports directory structure for the branch
          mkdir -p "reports_archive/$branch_name"
          
          # Copy report to archive location
          if [ -f "$report_file" ]; then
            cp "$report_file" "reports_archive/$branch_name/"
            echo "Error report saved to reports_archive/$branch_name/"
          else
            echo "Warning: Report file not found at $report_file"
            exit 1
          fi
          
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add and commit changes
          git add reports_archive/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "‚ö†Ô∏è Critical errors found: Add error report for branch $branch_name ($error_count issues found)"
            git push origin "$branch_name"
            echo "‚ùå Error report committed to branch $branch_name"
          fi

      - name: Upload Successful Report to SharePoint
        if: always() && steps.find_zip.outputs.skip_analysis != 'true' && steps.lint_step.outputs.scan_status == 'success'
        env:
          TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
          CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          SITE_URL: "https://n1pw.sharepoint.com/sites/CIpipeline-testing"
          FOLDER_PATH: "Shared Documents/Reports/Successful_Scans"
        run: |
          # Install required tools
          sudo apt-get install -y curl jq
          
          branch_name="${{ steps.lint_step.outputs.branch_name }}"
          timestamp="${{ steps.lint_step.outputs.timestamp }}"
          report_file="${{ steps.lint_step.outputs.report_file }}"
          
          echo "üéâ Code scan was successful! Uploading to SharePoint..."
          echo "üîê Authenticating with Microsoft Graph API..."
          
          # Get access token
          token_response=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&scope=https://graph.microsoft.com/.default" \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token")
          
          # Check if token request was successful
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to make token request"
            exit 1
          fi
          
          access_token=$(echo "$token_response" | jq -r '.access_token')
          
          if [ "$access_token" = "null" ] || [ -z "$access_token" ]; then
            echo "‚ùå Failed to get access token"
            echo "Token response: $token_response"
            exit 1
          fi
          
          echo "‚úÖ Successfully obtained access token"
          
          # Get site ID
          echo "üîç Getting SharePoint site ID..."
          site_response=$(curl -s -X GET \
            -H "Authorization: Bearer $access_token" \
            -H "Accept: application/json" \
            "https://graph.microsoft.com/v1.0/sites/n1pw.sharepoint.com:/sites/CIpipeline-testing")
          
          site_id=$(echo "$site_response" | jq -r '.id')
          
          if [ "$site_id" = "null" ] || [ -z "$site_id" ]; then
            echo "‚ùå Failed to get site ID"
            echo "Site response: $site_response"
            exit 1
          fi
          
          echo "‚úÖ Site ID obtained: $site_id"
          
          # Get or create Successful_Scans folder
          echo "üìÅ Accessing Successful_Scans folder..."
          
          # First, ensure Reports folder exists
          reports_folder_response=$(curl -s -X GET \
            -H "Authorization: Bearer $access_token" \
            -H "Accept: application/json" \
            "https://graph.microsoft.com/v1.0/sites/$site_id/drive/root:/Shared%20Documents/Reports")
          
          reports_folder_id=$(echo "$reports_folder_response" | jq -r '.id')
          
          if [ "$reports_folder_id" = "null" ] || [ -z "$reports_folder_id" ]; then
            echo "‚ö†Ô∏è Reports folder not found, creating it..."
            create_reports_response=$(curl -s -X POST \
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type: application/json" \
              -d '{"name":"Reports","folder":{}}' \
              "https://graph.microsoft.com/v1.0/sites/$site_id/drive/root:/Shared%20Documents:/children")
            
            reports_folder_id=$(echo "$create_reports_response" | jq -r '.id')
          fi
          
          # Now get or create Successful_Scans folder
          success_folder_response=$(curl -s -X GET \
            -H "Authorization: Bearer $access_token" \
            -H "Accept: application/json" \
            "https://graph.microsoft.com/v1.0/sites/$site_id/drive/root:/Shared%20Documents/Reports/Successful_Scans")
          
          success_folder_id=$(echo "$success_folder_response" | jq -r '.id')
          
          if [ "$success_folder_id" = "null" ] || [ -z "$success_folder_id" ]; then
            echo "‚ö†Ô∏è Successful_Scans folder not found, creating it..."
            create_success_response=$(curl -s -X POST \
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type: application/json" \
              -d '{"name":"Successful_Scans","folder":{}}' \
              "https://graph.microsoft.com/v1.0/sites/$site_id/drive/items/$reports_folder_id/children")
            
            success_folder_id=$(echo "$create_success_response" | jq -r '.id')
            
            if [ "$success_folder_id" = "null" ] || [ -z "$success_folder_id" ]; then
              echo "‚ùå Failed to create Successful_Scans folder"
              exit 1
            fi
            echo "‚úÖ Successful_Scans folder created"
          else
            echo "‚úÖ Successful_Scans folder found"
          fi
          
          # Upload file
          if [ ! -f "$report_file" ]; then
            echo "‚ùå Report file not found: $report_file"
            exit 1
          fi
          
          file_name="SUCCESS_lint_report_${branch_name}_${timestamp}.html"
          upload_url="https://graph.microsoft.com/v1.0/sites/$site_id/drive/items/$success_folder_id:/$file_name:/content"
          
          echo "üì§ Uploading successful scan report to SharePoint..."
          echo "Upload URL: $upload_url"
          echo "File: $report_file"
          
          upload_response=$(curl -s -w "%{http_code}" -X PUT "$upload_url" \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: text/html" \
            --data-binary "@$report_file")
          
          http_code="${upload_response: -3}"
          response_body="${upload_response%???}"
          
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "üéâ Successful scan report uploaded to SharePoint!"
            echo "File name: $file_name"
            
            # Extract file URL if available
            file_url=$(echo "$response_body" | jq -r '.webUrl // empty')
            if [ -n "$file_url" ]; then
              echo "üîó File URL: $file_url"
            fi
          else
            echo "‚ùå Failed to upload report to SharePoint"
            echo "HTTP Code: $http_code"
            echo "Response: $response_body"
            exit 1
          fi

      - name: Final Status Summary
        if: always() && steps.find_zip.outputs.skip_analysis != 'true'
        run: |
          scan_status="${{ steps.lint_step.outputs.scan_status }}"
          error_count="${{ steps.lint_step.outputs.error_count }}"
          branch_name="${{ steps.lint_step.outputs.branch_name }}"
          
          echo "=================================="
          echo "üîç FINAL ANALYSIS SUMMARY"
          echo "=================================="
          echo "Branch: $branch_name"
          echo "Scan Status: $scan_status"
          
          if [ "$scan_status" = "success" ]; then
            echo "‚úÖ CODE SCAN SUCCESSFUL!"
            echo "üì§ Report uploaded to SharePoint (Successful_Scans folder)"
            echo "üöÄ Code is ready for deployment"
          else
            echo "‚ùå CRITICAL ERRORS FOUND!"
            echo "üìù Error count: $error_count"
            echo "üìÅ Error report saved to branch: $branch_name"
            echo "üîß Please fix the issues before proceeding"
          fi
          echo "=================================="